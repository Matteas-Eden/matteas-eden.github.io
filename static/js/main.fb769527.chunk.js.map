{"version":3,"sources":["logo.svg","components/MenuItem.js","components/NavMenu.js","components/MenuCard.js","pages/Main.js","pages/Error404.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItem","props","Typography","item","React","Component","MenuCard","className","Grid","container","sm","Error404","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,iNCU5BC,MANf,SAAkBC,GACd,OACI,kBAACC,EAAA,EAAD,KAAaD,EAAME,OCHLC,IAAMC,U,6BC0BbC,E,YAtBb,WAAYL,GAAQ,qEACZA,I,sEAGN,OACE,yBAAKM,UAAU,YACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAML,MAAI,EAACO,IAAE,GACX,kBAAC,IAAD,a,GATWN,IAAMC,WCFVD,IAAMC,UCDV,SAASM,EAASV,GAC7B,OAAO,kBAACC,EAAA,EAAD,kC,0BC8CIU,MApCf,WACE,OACA,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,KAEhB,gEAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KAChB,kBAACH,EAAD,YCbQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fb769527.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nfunction MenuItem(props) {\n    return (\n        <Typography>{props.item}</Typography>\n    );\n}\n\nexport default MenuItem;","import React from 'react';\nimport MenuItem from './MenuItem';\n\nclass NavMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const items = props.items;\n\n        if (items) {\n            this.state = {\n                items: items\n            };\n        } else {\n            this.state = { items: null };\n        }\n    }\n\n    render() {\n        const items = this.state.items;\n        if (items) {\n            return (\n                <div className=\"navMenu\">\n                    <ul>\n                        {items.map((item, index) => \n                            <MenuItem item={item} onClick={console.log(\"Clicked an item\")} />)}\n                    </ul>\n                </div>\n            );\n        } else {\n            return <p>No items</p>;\n        }\n    }\n}\n\nexport default NavMenu;","import React from 'react';\nimport NavMenu from './NavMenu';\nimport LanguageSwitcher from './LanguageSwitcher';\nimport Grid from '@material-ui/core/Grid';\nimport SignatureLogo from '../logo.svg';\n\nclass MenuCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"menuCard\">\n        <Grid container>\n          <Grid item sm>\n            <SignatureLogo />\n          </Grid>\n          {/* <Grid item sm>\n            <NavMenu items={[\"About\", \"Projects\", \"Resume\", \"Contract\"]} />\n          </Grid>\n          <Grid item sm>\n            <LanguageSwitcher />\n          </Grid> */}\n        </Grid>\n      </div>\n    );\n  }\n};\n\nexport default MenuCard;","import React from 'react';\nimport MenuCard from '../components/MenuCard'\nimport Grid from '@material-ui/core/Grid'\n\nclass Main extends React.Component{\n    constructor(props) {\n        super(props);\n        // Do nothing yet\n    }\n\n    render() {\n        return (\n            <div className=\"MainPage\">\n                <Grid container>\n                    <MenuCard />\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function Error404(props) {\n    return <Typography>Error 404: Page Not Found</Typography>\n}","import React from 'react';\n\nimport Main from './pages/Main';\nimport Error404 from './pages/Error404'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tSwitch,\n\tLink as NavLink\n} from 'react-router-dom'\n\nfunction App() {\n  return (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Switch>\n          <Route exact path=\"/\">\n            {/* <Main /> */}\n            <h1>This site is under construction</h1>\n          </Route>\n          <Route exact path=\"*\">\n            <Error404 />\n          </Route>\n        </Switch>\n      </header>\n    </div>\n  </Router>\n  );\n}\n\n/**\n * <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <pre>\n          <code>\n\t  \tputs(\"Hello World!\");\n\t  </code>\n        </pre>\n        <a\n          className=\"App-link\"\n          href=\"http://matteas-eden.github.io/jekyll-site\"\n          target=\"_self\"\n          rel=\"noopener noreferrer\"\n        >\n          The actual site can be found here\n        </a> */ \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}